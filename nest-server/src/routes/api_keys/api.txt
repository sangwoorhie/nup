API Key 
1. API Key 생성 (사용자) O 
2. API Key 목록조회 (사용자) O
3. API Key 활성/정지 (사용자) O
4. IP 주소 수정 (사용자) O 
5. API Key 전체목록 조회 (관리자) O
6. API Key 입력조회 (Email or 이름 or ApiKey) (관리자) O 
7. API Key 활성/비활성 기능 (관리자) O 
8. API Key 재발급 기능 (관리자) O


1. API Key 생성 (사용자)
메소드: POST
URL: localhost:3000/api-keys/create
헤더:
Authorization: Bearer [JWT 토큰]
요청 바디:

json
.
{
  "ips": ["192.168.1.1", "192.168.1.2"]
}
응답 상태코드: 201
응답 바디:

json
.
{
  "api_key": "generated_api_key",
  "ips": "192.168.1.1,192.168.1.2"
}



2. API Key 목록조회 (사용자)
메소드: GET
URL: localhost:3000/api-keys/list?page=1&size=20
헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "page": 1,
  "size": 20,
  "total": 100,
  "items": [
    {
      "api_key": "api_key_1",
      "ips": ["192.168.1.1", "192.168.1.2"],
      "today_usage": 10,
      "total_usage": 100,
      "created_at": "2024-01-01T00:00:00.000Z"
    },
    ...
  ]
}



3. API Key 활성/정지 (사용자)
메소드: PATCH
URL: localhost:3000/api-keys/active/:apikey_id

헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "api_key": "api_key_1",
  "is_active": true,
  "message": "API-Key가 활성화되었습니다."
}



4. IP 주소 수정 (사용자)
메소드: PATCH
URL: localhost:3000/api-keys/update-ips/:apikey_id

헤더:
Authorization: Bearer [JWT 토큰]
요청 바디:

json
.
{
  "ips": ["192.168.1.3", "192.168.1.4"]
}
응답 상태코드: 200
응답 바디:

json
.
{
  "api_key": "api_key_1",
  "ips": ["192.168.1.3", "192.168.1.4"]
}



5. API Key 전체목록 조회 (관리자)
메소드: GET
URL: localhost:3000/api-keys/admin/list?page=1&size=20
헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "page": 1,
  "size": 20,
  "total": 100,
  "items": [
    {
      "api_key": "api_key_1",
      "ips": ["192.168.1.1", "192.168.1.2"],
      "today_usage": 10,
      "total_usage": 100,
      "created_at": "2024-01-01T00:00:00.000Z",
      "user_name": "user1",
      "email": "user1@example.com"
    },
    ...
  ]
}



6. API Key 입력조회 (Email or 이름 or ApiKey) (관리자)
메소드: GET
 // GET : localhost:3000/api-keys/admin/search?page=1&size=20&criteria=email&email=powercom92@naver.com
  // GET : localhost:3000/api-keys/admin/search?page=1&size=20&criteria=username&username=Jake
  // GET : localhost:3000/api-keys/admin/search?page=1&size=20&criteria=apikey&apikey=ABC123
헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "api_key": "api_key_1",
  "ips": ["192.168.1.1", "192.168.1.2"],
  "created_at": "2024-01-01T00:00:00.000Z",
  "user_name": "user1",
  "email": "user1@example.com"
}



7. API Key 활성/비활성 기능 (관리자)
메소드: PATCH
URL: localhost:3000/api-keys/admin/active/:apikey_id

헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "api_key": "api_key_1",
  "is_active": true,
  "message": "API-Key가 활성화되었습니다."
}



8. API Key 재발급 기능 (관리자)
메소드: PATCH
URL: localhost:3000/api-keys/admin/regenerate/

헤더:
Authorization: Bearer [JWT 토큰]
응답 상태코드: 200
응답 바디:

json
.
{
  "api_key": "new_api_key",
  "message": "API Key가 재발급되었습니다."
}